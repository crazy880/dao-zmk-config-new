/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ESCAPE {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_TAB {
            bindings = <&kp TAB>;
            key-positions = <4 5>;
        };

        combo_LCTRL {
            bindings = <&kp LCTRL>;
            key-positions = <25 26>;
        };

        combo_LALT {
            bindings = <&kp LALT>;
            key-positions = <27 26>;
        };

        combo_RCTRL {
            bindings = <&kp RCTRL>;
            key-positions = <34 33>;
        };

        combo_RALT {
            bindings = <&kp RALT>;
            key-positions = <33 32>;
        };

        combo_leftarrow {
            bindings = <&kp LC(LEFT_ARROW)>;
            key-positions = <15 16>;
        };

        combo_rightarrow {
            bindings = <&kp LC(RIGHT_ARROW)>;
            key-positions = <19 20>;
        };

        combo_uparrow {
            bindings = <&kp LC(UP_ARROW)>;
            key-positions = <7 8>;
        };

        combo_downarrow {
            bindings = <&kp LC(DOWN_ARROW)>;
            key-positions = <31 32>;
        };

        combo_CTRL_ALT_DEL {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <25 26 27 28>;
        };

        combo_lock_kbd {
            bindings = <&kp LG(L)>;
            key-positions = <31 32 33 34>;
        };

        combo_word_BSPC {
            bindings = <&kp LC(BSPC)>;
            key-positions = <16 15 14>;
        };

        combo_word_DEL {
            bindings = <&kp LC(DELETE)>;
            key-positions = <19 20 21>;
        };

        combo_word_select_left {
            bindings = <&kp LC(LS(LEFT))>;
            key-positions = <13 14 15 16>;
        };

        combo_word_select_right {
            bindings = <&kp LS(LC(RIGHT))>;
            key-positions = <19 20 21 22>;
        };

        combo_right_click_word {
            bindings = <&kp LS(F10)>;
            key-positions = <16 17>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 25>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 26>;
        };

        combo_paste {
            bindings = <&kp LC(P)>;
            key-positions = <28 27>;
        };

        combo_CTRL_Z {
            bindings = <&kp LC(Z)>;
            key-positions = <24 25>;
        };

        combo_alt-tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <29 28>;
        };

        combo_show_open_apps {
            bindings = <&kp LG(TAB)>;
            key-positions = <7 8 9 10>;
        };
    };

    macros {
        macro_pswd: macro_pswd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp R &kp F &kp V &kp E &kp D &kp C &kp LS(A) &kp KP_N9>,
                <&macro_tap>;

            label = "MACRO_PSWD";
            wait-ms = <40>;
            tap-ms = <40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&tog 2              &kp Q  &kp W  &kp E             &kp R           &kp T     &kp Y        &kp U        &kp I          &kp O    &kp P     &kp BSLH
&tog 1              &kp A  &kp S  &kp D             &mt LCTRL F     &kp G     &kp H        &mt RCTRL J  &kp K          &kp L    &kp SEMI  &mt RSHFT SQT
&mt CAPSLOCK LSHFT  &kp Z  &kp X  &kp C             &kp V           &kp B     &kp N        &kp M        &kp COMMA      &kp DOT  &kp FSLH  &kp RET
                                  &mt LCTRL DELETE  &mt LALT SPACE  &kp BSPC  &lt 2 SPACE  &lt 1 DEL    &mt RCTRL DEL
            >;
        };

        lower_layer {
            bindings = <
&mt LGUI F1  &kp F2        &kp F3        &kp F4        &kp F5     &kp F6       &kp F7     &kp F8          &kp F9        &kp F10         &kp F11          &kp F12
&tog 1       &kp C_VOL_DN  &kp C_VOL_UP  &kp PG_UP     &kp PG_DN  &kp HOME     &kp END    &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp BACKSLASH
&kp GRAVE    &kp EXCL      &kp AT        &kp POUND     &kp DLLR   &kp PERCENT  &kp CARET  &kp AMPS        &kp STAR      &kp LPAR        &kp RPAR         &kp GRAVE
                                         &lt ADJ BSPC  &none      &lt 3 BSPC   &lt 3 DEL  &trans          &lt ADJ DEL
            >;
        };

        raise_layer {
            bindings = <
&tog 2           &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp KP_EQUAL  &kp KP_N7        &kp KP_N8        &kp KP_N9        &kp KP_SLASH  &kp KP_SLASH
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp KP_MINUS  &kp KP_N4        &kp KP_N5        &kp KP_NUMBER_6  &kp KP_DOT    &kp KP_MULTIPLY
&kp LALT         &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp KP_PLUS   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_N3        &kp KP_N0     &trans
                                             &trans     &trans     &lt ADJ BSPC  &lt ADJ ESC   &kp KP_DOT       &kp KP_DOT
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &trans        &none         &trans
            >;
        };
    };
};
