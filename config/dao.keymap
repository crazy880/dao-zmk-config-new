/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        cmb_escape {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        cmb_tab {
            bindings = <&kp TAB>;
            key-positions = <4 5>;
        };

        cmb_leftjumpword {
            bindings = <&LW_LL>;
            key-positions = <14 13>;
            require-prior-idle-ms = <100>;
        };

        cmb_rightjumpword {
            bindings = <&RW_RL>;
            key-positions = <22 21>;
            require-prior-idle-ms = <100>;
        };

        cmb_word_bspc {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <15 16 14 13>;
        };

        cmb_word_del {
            bindings = <&kp LC(DEL)>;
            key-positions = <20 21 22 19>;
        };

        cmb_word_sel_left {
            bindings = <&kp LC(LS(LEFT))>;
            key-positions = <13 14 15>;
            require-prior-idle-ms = <200>;
        };

        cmb_word_sel_right {
            bindings = <&kp LC(LS(RIGHT))>;
            key-positions = <20 21 22>;
            require-prior-idle-ms = <200>;
        };

        cmb_rclick_word {
            bindings = <&kp LS(F10)>;
            key-positions = <22 23>;
        };

        cmb_ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
        };

        cmb_tog_L0 {
            bindings = <&tog 0>;
            key-positions = <38 39>;
            layers = <0 1 2>;
        };

        cmb_left_arrow {
            bindings = <&kp LEFT>;
            key-positions = <16 15>;
            require-prior-idle-ms = <200>;
        };

        cmb_right_arrow {
            bindings = <&kp RIGHT>;
            key-positions = <19 20>;
            require-prior-idle-ms = <200>;
        };

        cmb_up_arrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <3 4>;
            require-prior-idle-ms = <200>;
        };

        cmb_dn_arrow {
            bindings = <&kp DOWN>;
            key-positions = <31 32>;
            require-prior-idle-ms = <200>;
        };

        cmb_cut {
            bindings = <&kp LC(X)>;
            key-positions = <25 26 27>;
        };

        cmb_copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        cmb_paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        cmb_CT_AL_DEL {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <26 25 27 28>;
        };

        cmb_lock_kbd {
            bindings = <&kp LG(L)>;
            key-positions = <32 31 33 34>;
        };

        cmb_open_apps {
            bindings = <&kp LG(TAB)>;
            key-positions = <1 2 3 4>;
        };

        cmb_lshift {
            bindings = <&shft_word>;
            key-positions = <14 15>;
            require-prior-idle-ms = <100>;
        };

        cmb_rshift {
            bindings = <&shft_word>;
            key-positions = <21 20>;
        };

        cmb_atsym {
            bindings = <&kp AT>;
            key-positions = <1 13>;
        };

        cmb_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <15 3>;
        };

        cmb_percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 16>;
        };

        cmb_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <13 25 13 25>;
        };

        cmb_ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <15 27>;
        };

        cmb_win {
            bindings = <&kp LWIN>;
            key-positions = <14 14 14 14 2>;
        };

        cmb_apple {
            bindings = <&kp LCMD>;
            key-positions = <14 26>;
        };

        cmb_pssw {
            bindings = <&pssw>;
            key-positions = <7 8 9 10>;
        };

        cmd_LW3 {
            bindings = <&mcr_word_left_3>;
            key-positions = <25 28>;
        };

        cmb_LW6 {
            bindings = <&mcr_word_left_3>;
            key-positions = <13 16>;
        };

        cmb_LW9 {
            bindings = <&mcr_word_left_3>;
            key-positions = <1 4>;
        };
    };

    behaviors {
        spd_SYN: spd_SYN {
            compatible = "zmk,behavior-mod-morph";
            label = "SPD_SYN";
            bindings = <&lt 1 SPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT)>;
        };

        bsd_SYN: bsd_SYN {
            compatible = "zmk,behavior-mod-morph";
            label = "BSD_SYN";
            bindings = <&lt 1 BSPC>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT)>;
        };

        spd_ARR: spd_ARR {
            compatible = "zmk,behavior-mod-morph";
            label = "SPD_ARR";
            bindings = <&lt 2 BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_RCTL|MOD_RSFT|MOD_RALT)>;
        };

        bsd_ARR: bsd_ARR {
            compatible = "zmk,behavior-mod-morph";
            label = "BSD_ARR";
            bindings = <&lt 2 BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT)>;
        };

        direc: direc {
            compatible = "zmk,behavior-mod-morph";
            label = "DIREC";
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RALT|MOD_RCTL)>;
        };

        paren: paren {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RCTL|MOD_RALT)>;
        };

        bracket: bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RCTL|MOD_RALT)>;
        };

        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RCTL|MOD_RALT)>;
        };

        slashes: slashes {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHES";
            bindings = <&kp LS(BACKSLASH)>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_RCTL|MOD_RALT)>;
        };

        LW_LL: LW_LL {
            compatible = "zmk,behavior-mod-morph";
            label = "LW_LL";
            bindings = <&kp LC(LEFT)>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_LCTL)>;
        };

        RW_RL: RW_RL {
            compatible = "zmk,behavior-mod-morph";
            label = "RW_RL";
            bindings = <&kp LC(RIGHT)>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT)>;
        };

        direc2: direc2 {
            compatible = "zmk,behavior-tap-dance";
            label = "DIREC2";
            #binding-cells = <0>;
            bindings = <&kp LS(LESS_THAN)>, <&kp GREATER_THAN>;

            tapping-term-ms = <300>;
        };

        paren2: paren2 {
            compatible = "zmk,behavior-tap-dance";
            label = "PAREN2";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <300>;
        };

        brak2: brak2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BRAK2";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <300>;
        };

        brac2: brac2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BRAC2";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            tapping-term-ms = <300>;
        };

        slashes2: slashes2 {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASHES2";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            tapping-term-ms = <300>;
        };

        pqex: pqex {
            compatible = "zmk,behavior-tap-dance";
            label = "PQEX";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QUESTION>, <&kp EXCL>;

            tapping-term-ms = <300>;
        };

        comapoquo: comapoquo {
            compatible = "zmk,behavior-tap-dance";
            label = "COMAPOQUO";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp APOS>, <&kp DOUBLE_QUOTES>;

            tapping-term-ms = <300>;
        };

        shft_word: shft_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT_WORD";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        exc_pipe: exc_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "EXC_PIPE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp EXCL>, <&kp PIPE>;
        };

        pnd_perc: pnd_perc {
            compatible = "zmk,behavior-tap-dance";
            label = "PND_PERC";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp POUND>, <&kp PERCENT>;
        };

        str_semi: str_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "STR_SEMI";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp SEMI>;

            tapping-term-ms = <300>;
        };

        at_amp: at_amp {
            compatible = "zmk,behavior-tap-dance";
            label = "AT_AMP";
            #binding-cells = <0>;
            bindings = <&kp AT_SIGN>, <&kp AMPS>;

            tapping-term-ms = <300>;
        };

        s_d_quote: s_d_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "S_D_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        bs_pipe: bs_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "BS_PIPE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp BACKSLASH>, <&kp PIPE>;
        };
    };

    macros {
        mcr_word_left_3: mcr_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&LW_LL &LW_LL &LW_LL>;
            label = "MCR_WORD_LEFT";
        };

        pssw: pssw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp F &kp V &kp U &kp J &kp M &kp LS(A) &kp NUMBER_1>;
            label = "PSSW";
        };

        mcr_LW6: mcr_LW6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&LW_LL &LW_LL &LW_LL &LW_LL &LW_LL &LW_LL>;
            label = "MCR_LW6";
        };

        mcr_LW9: mcr_LW9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&LW_LL &LW_LL &LW_LL &LW_LL &LW_LL &LW_LL &LW_LL &LW_LL &LW_LL>;
            label = "MCR_LW9";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp LEFT_ALT      &kp Q  &kp W  &kp E    &kp R     &kp T     &kp Y     &kp U     &kp I       &kp O  &kp P     &mt RALT BACKSLASH
&shft_word        &kp A  &kp S  &kp D    &kp F     &kp G     &kp H     &kp J     &kp K       &kp L  &kp SEMI  &mt RSHFT SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C    &kp V     &kp B     &kp N     &kp M     &comapoquo  &pqex  &kp FSLH  &mt RCTRL RETURN
                                &lt 3 A  &spd_ARR  &bsd_SYN  &spd_SYN  &bsd_ARR  &none
            >;
        };

        symnum {
            bindings = <
&gresc     &direc2    &paren2           &brak2             &brac2     &slashes2   &kp EQUAL  &kp N7        &kp N8        &kp N9        &kp SLASH   &kp KP_MULTIPLY
&kp LSHFT  &at_amp    &str_semi         &kp DOLLAR         &pnd_perc  &s_d_quote  &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PERIOD  &kp RSHFT
&none      &exc_pipe  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp CARET  &bs_pipe    &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0      &kp RETURN
                                        &none              &none      &none       &none      &none         &none
            >;
        };

        arrow {
            bindings = <
&mt LGUI KP_NUM  &kp C_MUTE  &kp C_VOL_DN    &kp C_VOL_UP     &kp C_BRI_DN  &kp C_BRI_UP  &none     &kp PG_UP      &kp PSCRN             &none                  &none      &none
&none            &kp AMPS    &kp SEMI        &kp COLON        &kp PERCENT   &kp GRAVE     &kp HOME  &kp LEFT       &kp UP                &kp DOWN               &kp RIGHT  &kp END
&none            &kp PIPE    &kp LEFT_BRACE  &kp RIGHT_BRACE  &none         &none         &none     &kp PAGE_DOWN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none      &none
                                             &none            &none         &none         &none     &none          &none
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &bt BT_CLR_ALL  &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans          &trans        &none         &trans
            >;
        };
    };
};
