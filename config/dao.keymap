/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ESCAPE {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_TAB {
            bindings = <&kp TAB>;
            key-positions = <4 5>;
        };

        combo_LCTRL {
            bindings = <&sk LCTRL>;
            key-positions = <5 17>;
        };

        combo_LALT {
            bindings = <&sk LALT>;
            key-positions = <5 17>;
        };

        combo_RCTRL {
            bindings = <&sk RCTRL>;
            key-positions = <18 6>;
        };

        combo_RALT {
            bindings = <&sk RALT>;
            key-positions = <18 30>;
        };

        combo_leftjumpword {
            bindings = <&LW_LL>;
            key-positions = <13 14>;
        };

        combo_rightjumpword {
            bindings = <&RW_RL>;
            key-positions = <21 22>;
        };

        combo_uparrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <7 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_downarrow {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <31 30>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_CTRL_ALT_DEL {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <25 26 27 28>;
        };

        combo_lock_kbd {
            bindings = <&kp LG(L)>;
            key-positions = <31 32 33 34>;
        };

        combo_word_BSPC {
            bindings = <&kp LC(BSPC)>;
            key-positions = <15 14 13>;
        };

        combo_word_DEL {
            bindings = <&kp LC(DELETE)>;
            key-positions = <20 21 22>;
        };

        combo_word_select_left {
            bindings = <&kp LC(LS(LEFT))>;
            key-positions = <13 14 15 16>;
        };

        combo_word_select_right {
            bindings = <&kp LS(LC(RIGHT))>;
            key-positions = <19 20 21 22>;
        };

        combo_right_click_word {
            bindings = <&kp LS(F10)>;
            key-positions = <22 23>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <16 19>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <17 18>;
        };

        combo_CTRL_Z {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
            require-prior-idle-ms = <150>;
        };

        combo_show_open_apps {
            bindings = <&kp LG(TAB)>;
            key-positions = <1 2 3 4>;
        };

        combo_p {
            bindings = <&macro_p>;
            key-positions = <7 8 9 10>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <15 20>;
        };

        combo_LSHFT {
            bindings = <&qr_stickykey LEFT_SHIFT>;
            key-positions = <14 15>;
            require-prior-idle-ms = <150>;
        };

        combo_RSHFT {
            bindings = <&qr_stickykey RIGHT_SHIFT>;
            key-positions = <21 20>;
            require-prior-idle-ms = <150>;
        };

        combo_tog_L1 {
            bindings = <&tog 1>;
            key-positions = <7 10>;
        };

        combo_tog_L2 {
            bindings = <&tog 2>;
            key-positions = <19 22>;
        };

        combo_tog_L3 {
            bindings = <&tog 3>;
            key-positions = <31 34>;
        };

        combo_tog_L0 {
            bindings = <&tog 0>;
            key-positions = <38 39>;
        };

        combo_tog_L4 {
            bindings = <&tog 4>;
            key-positions = <37 40>;
        };

        left_arrow {
            bindings = <&kp LEFT>;
            key-positions = <18 19>;
            require-prior-idle-ms = <150>;
        };

        right_arrow {
            bindings = <&kp RIGHT>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        macro_p: macro_pswd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp R &kp F &kp V &kp E &kp D &kp C &kp LS(A) &kp KP_N9>,
                <&macro_tap>;

            label = "MACRO_PSWD";
            wait-ms = <40>;
            tap-ms = <40>;
        };
    };

    behaviors {
        td_bsp_L2: td_bsp_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSP_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 BACKSPACE>, <&tog 2>;
        };

        td_del_L1: td_del_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DEL_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 DELETE>, <&tog 1>;
        };

        td_sp_L3_CTR: td_sp_L3_CTR {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SP_L3_CTR";
            #binding-cells = <0>;
            bindings = <&lt 0 SPACE>, <&tog 0>, <&sk LCTRL>;
        };

        td_sp_L2: td_sp_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SP_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&tog 2>;
        };

        td_bsc_L1: td_bsc_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSC_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 BSPC>, <&tog 1>;
        };

        td_F_L1: td_F_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_F_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 F>, <&tog 1>;

            tapping-term-ms = <400>;
        };

        td_D_L2: td_D_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_D_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 D>, <&tog 2>;

            tapping-term-ms = <400>;
        };

        td_G_L0: td_G_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_G_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 G>, <&tog 0>;

            tapping-term-ms = <400>;
        };

        td_S_L3: td_S_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_S_L3";
            #binding-cells = <0>;
            bindings = <&lt 0 S>, <&tog 0>;

            tapping-term-ms = <400>;
        };

        td_A_L4: td_A_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_A_L4";
            #binding-cells = <0>;
            bindings = <&lt 3 A>, <&tog 3>;

            tapping-term-ms = <400>;
        };

        H_L0: H_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "H_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 H>, <&tog 0>;

            tapping-term-ms = <400>;
        };

        J_L1: J_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "J_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 J>, <&tog 1>;

            tapping-term-ms = <400>;
        };

        K_L2: K_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "K_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 K>, <&tog 2>;

            tapping-term-ms = <400>;
        };

        L_L3: L_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "L_L3";
            #binding-cells = <0>;
            bindings = <&lt 0 L>, <&tog 0>;
        };

        i3_L0: i3_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "I3_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 I>, <&tog 0>;
        };

        a3_L1: a3_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "A3_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 A>, <&tog 2>;
        };

        e3_L2: e3_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "E3_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 E>, <&tog 2>;
        };

        h3_L3: h3_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "H3_L3";
            #binding-cells = <0>;
            bindings = <&lt 0 H>, <&tog 0>;
        };

        o3_L4: o3_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "O3_L4";
            #binding-cells = <0>;
            bindings = <&lt 3 O>, <&tog 3>;
        };

        d3_L0: d3_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "D3_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 D>, <&tog 0>;
        };

        r3_L1: r3_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "R3_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 R>, <&tog 1>;
        };

        t3_L2: t3_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "T3_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 T>, <&tog 2>;
        };

        n3_L3: n3_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "N3_L3";
            #binding-cells = <0>;
            bindings = <&lt 0 N>, <&tog 0>;
        };

        s3_L4: s3_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "S3_L4";
            #binding-cells = <0>;
            bindings = <&lt 3 S>, <&tog 3>;
        };

        parL_lesL: parL_lesL {
            compatible = "zmk,behavior-tap-dance";
            label = "PARL_LESL";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            tapping-term-ms = <300>;
        };

        parR_grR: parR_grR {
            compatible = "zmk,behavior-tap-dance";
            label = "PARR_GRR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            tapping-term-ms = <300>;
        };

        min_pl_eq: min_pl_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "MIN_PL_EQ";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>, <&kp KP_EQUAL>;

            tapping-term-ms = <300>;
        };

        sem_L4: sem_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "SEM_L4";
            #binding-cells = <0>;
            bindings = <&lt 3 SEMI>, <&tog 3>;
        };

        bs_del_L2: bs_del_L2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL_L2";
            bindings = <&lt 2 BSPC>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RALT)>;
        };

        sp_del_L2: sp_del_L2 {
            compatible = "zmk,behavior-mod-morph";
            label = "SP_DEL_L2";
            bindings = <&lt 2 SPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT)>;
        };

        LW_LL: LW_LL {
            compatible = "zmk,behavior-mod-morph";
            label = "LW_LL";
            bindings = <&kp LC(LEFT)>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LALT|MOD_RSFT|MOD_RALT)>;
        };

        RW_RL: RW_RL {
            compatible = "zmk,behavior-mod-morph";
            label = "RW_RL";
            bindings = <&kp RC(RIGHT)>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_RALT|MOD_LALT|MOD_LSFT)>;
        };

        sp_del_shft: sp_del_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SP_DEL_SHFT";
            bindings = <&mt RSHFT SPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RALT)>;
        };

        bs_del_shft: bs_del_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL_SHFT";
            bindings = <&mt LSHFT BSPC>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RALT)>;
        };

        bs_del_L1: bs_del_L1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL_L1";
            bindings = <&lt 1 BSPC>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RALT)>;
        };

        sp_del_L1: sp_del_L1 {
            compatible = "zmk,behavior-mod-morph";
            label = "SP_DEL_L1";
            bindings = <&lt 1 BSPC>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RALT)>;
        };

        qr_stickykey: qr_stickykey {
            compatible = "zmk,behavior-sticky-key";
            label = "QR_STICKYKEY";
            bindings = <&sk>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <200>;
        };

        bspshft: bspshft {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPSHFT";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <38>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp LEFT_CONTROL  &kp Q  &kp W  &kp E   &kp R   &kp T                &kp Y       &kp U       &kp I      &kp O    &kp P      &kp BSLH
&kp LSHFT         &kp A  &kp S  &kp D   &kp F   &kp G                &kp H       &kp J       &kp K      &kp L    &kp SEMI   &kp APOS
&kp LEFT_ALT      &kp Z  &kp X  &kp C   &kp V   &kp B                &kp N       &kp M       &kp COMMA  &kp DOT  &kp SLASH  &kp RET
                                &tog 1  &tog 2  &bspshft LSHFT BSPC  &sp_del_L2  &bs_del_L1  &tog 4
            >;
        };

        arrows-symbols {
            bindings = <
&mt F7 F1  &mt F2 C_MUTE  &mt F3 C_VOLUME_DOWN  &mt F4 C_VOLUME_UP  &mt F5 C_BRI_DEC  &mt F6 C_BRI_INC  &kp PAGE_UP  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PAGE_DOWN
&kp GRAVE  &kp EXCL       &kp AT                &kp POUND           &kp DOLLAR        &kp PERCENT       &kp HOME     &kp LEFT_ARROW  &kp UP_ARROW     &kp DOWN_ARROW    &kp RIGHT_ARROW    &kp END
&kp CARET  &kp AMPS       &kp ASTRK             &kp MINUS           &kp SINGLE_QUOTE  &kp BSLH          &none        &none           &none            &parL_lesL        &parR_grR          &min_pl_eq
                                                &none               &none             &trans            &tog 1       &trans          &none
            >;
        };

        numbers {
            bindings = <
&kp KP_SLASH  &kp KP_SLASH  &kp NUMBER_9  &kp N8        &kp N7        &kp KP_EQUAL  &kp KP_EQUAL  &kp N7        &kp N8        &kp N9        &kp COLON   &kp KP_SLASH
&tog 2        &kp DOT       &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &kp KP_MINUS  &kp KP_MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PERIOD  &kp KP_MULTIPLY
&none         &kp N0        &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp KP_PLUS   &kp KP_PLUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0      &kp RET
                                          &trans        &kp COLON     &trans        &tog 2        &none         &none
            >;
        };

        threeL {
            bindings = <
&none   &kp Q      &kp F  &kp U       &kp Y       &kp Z         &kp X         &kp K       &kp C       &kp W  &kp B      &kp BACKSLASH
&tog 3  &kp O      &kp H  &kp E       &kp A       &kp I         &kp D         &kp R       &kp T       &kp N  &kp S      &kp APOS
&tog 0  &kp COMMA  &kp M  &kp DOT     &kp J       &kp SEMI      &kp G         &kp L       &kp P       &kp V  &kp SLASH  &kp RET
                          &bs_del_L1  &bs_del_L2  &bs_del_shft  &sp_del_shft  &sp_del_L2  &sp_del_L1
            >;
        };

        BT {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &bootloader
&tog 4       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &sys_reset
                                         &trans        &trans        &trans        &tog 4  &trans  &trans
            >;
        };
    };
};
