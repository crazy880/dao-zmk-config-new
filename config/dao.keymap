/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ESCAPE {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_TAB {
            bindings = <&kp TAB>;
            key-positions = <4 5>;
        };

        combo_LCTRL {
            bindings = <&sk LCTRL>;
            key-positions = <25 26>;
        };

        combo_LALT {
            bindings = <&sk LALT>;
            key-positions = <27 26>;
        };

        combo_RCTRL {
            bindings = <&sk RCTRL>;
            key-positions = <34 33>;
        };

        combo_RALT {
            bindings = <&sk RALT>;
            key-positions = <33 32>;
        };

        combo_leftarrow {
            bindings = <&kp LC(LEFT_ARROW)>;
            key-positions = <15 16>;
        };

        combo_rightarrow {
            bindings = <&kp LC(RIGHT_ARROW)>;
            key-positions = <19 20>;
        };

        combo_uparrow {
            bindings = <&kp LC(UP_ARROW)>;
            key-positions = <7 8>;
        };

        combo_downarrow {
            bindings = <&kp LC(DOWN_ARROW)>;
            key-positions = <31 32>;
        };

        combo_CTRL_ALT_DEL {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <25 26 27 28>;
        };

        combo_lock_kbd {
            bindings = <&kp LG(L)>;
            key-positions = <31 32 33 34>;
        };

        combo_word_BSPC {
            bindings = <&kp LC(BSPC)>;
            key-positions = <16 15 14>;
        };

        combo_word_DEL {
            bindings = <&kp LC(DELETE)>;
            key-positions = <19 20 21>;
        };

        combo_word_select_left {
            bindings = <&kp LC(LS(LEFT))>;
            key-positions = <13 14 15 16>;
        };

        combo_word_select_right {
            bindings = <&kp LS(LC(RIGHT))>;
            key-positions = <19 20 21 22>;
        };

        combo_right_click_word {
            bindings = <&kp LS(F10)>;
            key-positions = <19 18>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 28>;
        };

        combo_paste {
            bindings = <&kp LC(P)>;
            key-positions = <28 27>;
        };

        combo_CTRL_Z {
            bindings = <&kp LC(Z)>;
            key-positions = <24 25>;
        };

        combo_alt-tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <29 28>;
        };

        combo_show_open_apps {
            bindings = <&kp LG(TAB)>;
            key-positions = <7 8 9 10>;
        };

        combo_pswd {
            bindings = <&macro_pswd>;
            key-positions = <1 2 3 4>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <27 25>;
        };

        combo_LSHFT {
            bindings = <&sk LSHFT>;
            key-positions = <13 14>;
        };

        combo_RSHFT {
            bindings = <&sk RSHFT>;
            key-positions = <21 22>;
        };

        combo_tog_L1 {
            bindings = <&tog 1>;
            key-positions = <31 34>;
        };

        combo_tog_L2 {
            bindings = <&tog 2>;
            key-positions = <19 22>;
        };

        combo_tog_L3 {
            bindings = <&tog 3>;
            key-positions = <7 10>;
        };
    };

    macros {
        macro_pswd: macro_pswd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp R &kp F &kp V &kp E &kp D &kp C &kp LS(A) &kp KP_N9>,
                <&macro_tap>;

            label = "MACRO_PSWD";
            wait-ms = <40>;
            tap-ms = <40>;
        };
    };

    behaviors {
        td_bsp_L2: td_bsp_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSP_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 BACKSPACE>, <&tog 2>;
        };

        td_del_L1: td_del_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DEL_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 DELETE>, <&tog 1>;
        };

        td_sp_L3_CTR: td_sp_L3_CTR {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SP_L3_CTR";
            #binding-cells = <0>;
            bindings = <&lt 3 SPACE>, <&tog 3>, <&sk LCTRL>;
        };

        td_sp_L2: td_sp_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SP_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&tog 2>;
        };

        td_bsc_L1: td_bsc_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSC_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 BSPC>, <&tog 1>;
        };

        td_F_L1: td_F_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_F_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 F>, <&tog 1>;

            tapping-term-ms = <400>;
        };

        td_D_L2: td_D_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_D_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 D>, <&tog 2>;

            tapping-term-ms = <400>;
        };

        td_G_L0: td_G_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_G_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 G>, <&tog 0>;

            tapping-term-ms = <400>;
        };

        td_S_L3: td_S_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_S_L3";
            #binding-cells = <0>;
            bindings = <&lt 3 S>, <&tog 3>;

            tapping-term-ms = <400>;
        };

        td_A_L4: td_A_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_A_L4";
            #binding-cells = <0>;
            bindings = <&lt 4 A>, <&tog 4>;

            tapping-term-ms = <400>;
        };

        H_L0: H_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "H_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 H>, <&tog 0>;

            tapping-term-ms = <400>;
        };

        J_L1: J_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "J_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 J>, <&tog 1>;

            tapping-term-ms = <400>;
        };

        K_L2: K_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "K_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 K>, <&tog 2>;

            tapping-term-ms = <400>;
        };

        L_L3: L_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "L_L3";
            #binding-cells = <0>;
            bindings = <&lt 3 L>, <&tog 3>;
        };

        i3_L0: i3_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "I3_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 I>, <&tog 0>;
        };

        a3_L1: a3_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "A3_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 A>, <&tog 2>;
        };

        e3_L2: e3_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "E3_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 E>, <&tog 2>;
        };

        h3_L3: h3_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "H3_L3";
            #binding-cells = <0>;
            bindings = <&lt 3 H>, <&tog 3>;
        };

        o3_L4: o3_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "O3_L4";
            #binding-cells = <0>;
            bindings = <&lt 4 O>, <&tog 4>;
        };

        d3_L0: d3_L0 {
            compatible = "zmk,behavior-tap-dance";
            label = "D3_L0";
            #binding-cells = <0>;
            bindings = <&lt 0 D>, <&tog 0>;
        };

        r3_L1: r3_L1 {
            compatible = "zmk,behavior-tap-dance";
            label = "R3_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 R>, <&tog 1>;
        };

        t3_L2: t3_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "T3_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 T>, <&tog 2>;
        };

        n3_L3: n3_L3 {
            compatible = "zmk,behavior-tap-dance";
            label = "N3_L3";
            #binding-cells = <0>;
            bindings = <&lt 3 N>, <&tog 3>;
        };

        s3_L4: s3_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "S3_L4";
            #binding-cells = <0>;
            bindings = <&lt 4 S>, <&tog 4>;
        };

        parL_lesL: parL_lesL {
            compatible = "zmk,behavior-tap-dance";
            label = "PARL_LESL";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;
        };

        parR_grR: parR_grR {
            compatible = "zmk,behavior-tap-dance";
            label = "PARR_GRR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;
        };

        min_pl_eq: min_pl_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "MIN_PL_EQ";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>, <&kp KP_EQUAL>;
        };

        sem_L4: sem_L4 {
            compatible = "zmk,behavior-tap-dance";
            label = "SEM_L4";
            #binding-cells = <0>;
            bindings = <&lt 4 SEMI>, <&tog 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE     &kp Q  &kp W  &kp E           &kp R             &kp T           &kp Y            &kp U             &kp I          &kp O    &kp P     &kp BSLH
&kp LSHFT      &kp A  &kp S  &kp D           &kp F             &kp G           &kp H            &kp J             &kp K          &kp L    &kp SEMI  &mt RSHFT SQT
&mt LSHFT TAB  &kp Z  &kp X  &kp C           &kp V             &kp B           &kp N            &kp M             &kp COMMA      &kp DOT  &kp FSLH  &kp RET
                             &mt LALT SPACE  &mt LCTRL DELETE  &mt LSHFT BSPC  &mt RSHFT SPACE  &mt RCTRL DELETE  &mt RALT BSPC
            >;
        };

        lower_layer {
            bindings = <
&mt F7 F1   &mt F8 F2     &mt F13 F3    &mt F10 F4  &mt F11 F5  &mt F12 F6   &none      &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none
&kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp PG_DN   &kp PG_UP   &tog 1       &kp HOME   &kp LEFT_ARROW  &kp UP_ARROW     &kp DOWN_ARROW    &kp RIGHT_ARROW    &kp END
&kp GRAVE   &kp EXCL      &kp AT        &kp POUND   &kp DLLR    &kp PERCENT  &kp CARET  &kp AMPS        &kp STAR         &parL_lesL        &parR_grR          &min_pl_eq
                                        &trans      &trans      &trans       &tog 0     &tog 1          &tog 4
            >;
        };

        raise_layer {
            bindings = <
&kp KP_SLASH     &kp KP_SLASH  &kp KP_N9  &kp KP_N8  &kp KP_N7        &kp KP_EQUAL  &kp KP_EQUAL  &kp KP_N7        &kp KP_N8  &kp KP_NUMBER_9  &kp KP_SLASH  &kp KP_SLASH
&kt KP_MULTIPLY  &kp KP_DOT    &kp KP_N6  &kp KP_N5  &kp KP_N4        &kp KP_MINUS  &kp KP_MINUS  &kp KP_N4        &kp KP_N5  &kp KP_N6        &kp KP_DOT    &kp KP_MULTIPLY
&tog 2           &kp KP_N0     &kp KP_N3  &kp KP_N2  &kp KP_NUMBER_1  &kp KP_PLUS   &kp KP_PLUS   &kp KP_NUMBER_1  &kp KP_N2  &kp KP_NUMBER_3  &kp KP_N0     &kp RET
                                          &none      &none            &trans        &tog 0        &tog 2           &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&tog 3       &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &tog 0        &tog 3        &trans
            >;
        };

        layout_3l {
            bindings = <
&tog 4   &kp Q      &kp F   &kp U               &kp Y             &kp Z           &kp X            &kp K             &kp C               &kp W   &kp B     &kp BACKSLASH
&kp TAB  &o3_L4     &h3_L3  &e3_L2              &a3_L1            &i3_L0          &d3_L0           &r3_L1            &t3_L2              &n3_L3  &s3_L4    &kp APOS
&tog 4   &kp COMMA  &kp M   &kp DOT             &kp J             &kp SEMI        &kp G            &kp L             &kp P               &kp V   &kp FSLH  &kp ENTER
                            &mt LEFT_ALT SPACE  &mt LCTRL DELETE  &mt LSHFT BSPC  &mt RSHFT SPACE  &mt RCTRL DELETE  &mt RALT BACKSPACE
            >;
        };
    };
};
